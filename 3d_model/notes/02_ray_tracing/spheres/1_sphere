S.setFragmentShader(`
// 2 sources of lights - key light and fill light
const int nL = 2;

uniform float uTime;
varying vec3 vPos;

float fl = 3.;

// S stores position and radius
//vec4 S = vec4(.5*cos(uTime), .5*sin(uTime), 0., .2);
vec4 S = vec4(0., 0., 0., .3); // (0,0,0) at origin, radius .2


vec3 Ld[nL];
vec3 Lc[nL];

vec3 bgColor = vec3(.1,.2,.5);

vec3 Ambient = bgColor;
vec3 Diffuse = vec3(.9);
vec4 Specular = vec4(1.,1.,1.,10); // (r,g,b,power)

float raySphere(vec3 V, vec3 W, vec4 S) {
  V -= S.xyz;
  float b = dot(V, W);
  float d = b*b - dot(V, V) + S.w*S.w;
  return d < 0. ? -1. : -b - sqrt(d); 
}

vec3 shadeSphere(vec3 P, vec4 S) {
  vec3 N = normalize(P - S.xyz);
  vec3 c  = Ambient;
  for (int l = 0; l < nL; l++) {
    c += Diffuse * max(0., dot(N, Ld[l])) * Lc[l];
  }
  return c;
}

void main() {
  Ld[0] = vec3(.57, .57, .57);
  Lc[0] = vec3(1.);

  Ld[1] = vec3(-.57, -.57, -.57);
  Lc[1] = vec3(.5, .2, .1);

  //vec3 color = vec3(.1, .2, .5);
  vec3 color = bgColor;
  vec3 V = vec3(0., 0., fl); // origin
  vec3 W = normalize(vec3(vPos.xy, -fl)); // direction

  float t = raySphere(V, W, S);

  if (t > 0.) {
    color = shadeSphere(V+t*W, S);
  }

  // display
  gl_FragColor = vec4(sqrt(color), 1.);
}
   
`);
