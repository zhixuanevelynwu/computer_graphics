S.setFragmentShader(`
    const int nL = 2;
    const int nS = 2;

    uniform float uTime;
    varying vec3 vPos;

    float fl = 3.;
    vec4 S[nS];

    vec3 Ld[nL];
    vec3 Lc[nL];

    vec3 bgColor = vec3(.1,.2,.5);

    vec3 Ambient = bgColor;
    vec3 Diffuse = vec3(.9);
    vec4 Specular = vec4(1.,1.,1.,10); // (r,g,b,power)

    float raySphere(vec3 V, vec3 W, vec4 S) {
    V -= S.xyz;
    float b = dot(V, W);
    float d = b*b - dot(V, V) + S.w*S.w;
    return d < 0. ? -1. : -b - sqrt(d); 
    }

    vec3 shadeSphere(vec3 P, vec4 S) {
    vec3 N = normalize(P - S.xyz);
    vec3 c  = Ambient;
    for (int l = 0; l < nL; l++) {
        c += Diffuse * max(0., dot(N, Ld[l])) * Lc[l];
    }
    return c;
    }

    void main() {
        Ld[0] = vec3(.57, .57, .57);
        Lc[0] = vec3(1.);

        Ld[1] = vec3(-.57, -.57, -.57);
        Lc[1] = vec3(.5, .2, .1);

        // 2 spheres
        S[0] = vec4(.2,.2,0.3 * sin(uTime),.3);
        S[1] = vec4(-.1,0.,0.,.3);

        vec3 color = bgColor;

        vec3 V = vec3(0., 0., fl); // origin
        vec3 W = normalize(vec3(vPos.xy, -fl)); // direction

        float tMin = 10000.;
        for (int n = 0; n < nS; n++) {
            float t = raySphere(V, W, S[n]);
            if (t > 0. && t < tMin) {
                color = shadeSphere(V + t * W, S[n]);
                tMin = t;
            }
        }

        // display
        gl_FragColor = vec4(sqrt(color), 1.);
    }
   
`);
